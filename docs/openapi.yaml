openapi: 3.0.0
info:
  description: >-
    # Recurring payments

    Recurring payments is used for subscription payments such as weekly dues for newspaper access, monthly dues for public transportation, etc.

    1. A draft agreement is initialized and the user is redirected for approval.

    2. The user approves the agreement and the merchant can call GET on the agreement to verify the status.

    3. The merchant can start sending charges which will be charged the user in the future.

    The merchant is responsible for checking the status of charges, and cancelling any user access if charges are failing (or contacting the user).

    ## Authentication

    See <a href="#/Authorization%20Service/getAccessToken" target="_blank">Fetch authorization token</a>

    For information regarding authentication please read [our guide](https://github.com/vippsas/vipps-recurring-api/blob/master/vipps-recurring-api.md#authentication)


  version: 2.5.1
  title: Recurring Payments Merchant API
tags:
  - name: Authorization Service
  - name: Agreement Endpoints
  - name: Charge Endpoints
  - name: Userinfo Endpoint
paths:
  /accesstoken/get:
    post:
      servers:
        - url: https://api.vipps.no
        - url: https://apitest.vipps.no
      tags:
        - Authorization Service
      summary: Fetch authorization token
      operationId: getAccessToken
      description: >-
        The access token endpoint is used to get the JWT (JSON Web Token) that
        must be passed in every API request in the Authorization header.
        The access token is a base64-encoded string value that must be
        aquired first before making any Vipps api calls.
        The access token is valid for 1 hour in the test environment
        and 24 hours in the production environment.
      parameters:
        - name: client_id
          in: header
          required: true
          description: >-
            The `client_id` is available on portal.vipps.no, under the 'Utvikler' tab.
          schema:
            type: string
          example: fb492b5e-7907-4d83-ba20-c7fb60ca35de
        - name: client_secret
          in: header
          required: true
          description: >-
            The `client_secret` is available on portal.vipps.no, under the 'Utvikler' tab.
            Keep it secret.
          schema:
            type: string
          example: Y8Kteew6GE2ZmeycEt6egg==
        - $ref: "#/components/parameters/Ocp-Apim-Subscription-Key"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessTokenResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "429":
          $ref: "#/components/responses/RateLimitError"
        "500":
          $ref: "#/components/responses/ServerError"
        "503":
          $ref: "#/components/responses/UnavailableError"
        "504":
          $ref: "#/components/responses/TimeoutError"

  "/recurring/v2/agreements":
    get:
      tags:
        - Agreement Endpoints
      summary: List Agreements
      operationId: listAgreements
      description: >-
        The API call allows merchant to fetch all agreements. If no query status is supplied it will default to only retrieving active agreements.
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/Ocp-Apim-Subscription-Key"
        - $ref: "#/components/parameters/Content-Type"
        - $ref: "#/components/parameters/Merchant-Serial-Number"
        - $ref: "#/components/parameters/Vipps-System-Name"
        - $ref: "#/components/parameters/Vipps-System-Version"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Name"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Version"
        - name: status
          in: query
          required: false
          description: Filter by status of the agreement.
          schema:
            $ref: "#/components/schemas/AgreementStatus"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Agreement"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "429":
          $ref: "#/components/responses/RateLimitError"
        "500":
          $ref: "#/components/responses/ServerError"
        "503":
          $ref: "#/components/responses/UnavailableError"
        "504":
          $ref: "#/components/responses/TimeoutError"
    post:
      tags:
        - Agreement Endpoints
      summary: Create a new Agreement, to be confirmed in Vipps
      operationId: draftAgreement
      description: >-
        The API call allows merchants to create agreements for a user to accept. Once the agreement is drafted you will receive a `vippsConfirmationUrl`. This is used to redirect the user to the Vipps landing page, or to the Vipps app if `"isApp":true` is used.
          </br>
          If the user accepts or rejects the agreement, the user will be redirected back to whichever URL has been passed in `merchantRedirectUrl`. We **strongly** recomend that you implement polling on the agreement to check when the status changes to active instead of relaying on the redirect back to the `merchantRedirectUrl`. We have no control over if a user is actially redirected back or not, this depends on what browser the user came from.
          </br>
          Please note the different use cases for `initialCharge` and `compaign`. And when to use `RESERVE_CAPTURE` instead of `DIRECT_CAPTURE` as transactionType. More information about this can be found in the API documentation.
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/Ocp-Apim-Subscription-Key"
        - $ref: "#/components/parameters/Content-Type"
        - $ref: "#/components/parameters/Merchant-Serial-Number"
        - $ref: "#/components/parameters/Vipps-System-Name"
        - $ref: "#/components/parameters/Vipps-System-Version"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Name"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Version"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AgreementRequest"
        required: true
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgreementReference"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "422":
          description: Unprocessable Entity (invalid json)
        "429":
          $ref: "#/components/responses/RateLimitError"
        "500":
          $ref: "#/components/responses/ServerError"
        "503":
          $ref: "#/components/responses/UnavailableError"
        "504":
          $ref: "#/components/responses/TimeoutError"
  "/recurring/v2/agreements/{agreementId}":
    get:
      tags:
        - Agreement Endpoints
      summary: Fetch an Agreement
      operationId: getAgreement
      description: >-
        Fetch a single agreement for a user. Recomended to use when polling for status changes after sending an agreement to a user.
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/Ocp-Apim-Subscription-Key"
        - $ref: "#/components/parameters/Content-Type"
        - $ref: "#/components/parameters/Merchant-Serial-Number"
        - $ref: "#/components/parameters/Vipps-System-Name"
        - $ref: "#/components/parameters/Vipps-System-Version"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Name"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Version"
        - $ref: "#/components/parameters/AgreementId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Agreement"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "429":
          $ref: "#/components/responses/RateLimitError"
        "500":
          $ref: "#/components/responses/ServerError"
        "503":
          $ref: "#/components/responses/UnavailableError"
        "504":
          $ref: "#/components/responses/TimeoutError"
    patch:
      tags:
        - Agreement Endpoints
      summary: Update an Agreement
      operationId: updateAgreement
      description: >-
        Updates the agreement. Note that when updating the status to "STOPPED", you can not re-activate it. If you want to pause an agreement, we suggest leaving the agreement active and skipping the creation of charges as long as the agreement is paused in your systems.
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/Ocp-Apim-Subscription-Key"
        - $ref: "#/components/parameters/Content-Type"
        - $ref: "#/components/parameters/Merchant-Serial-Number"
        - $ref: "#/components/parameters/Vipps-System-Name"
        - $ref: "#/components/parameters/Vipps-System-Version"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Name"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Version"
        - $ref: "#/components/parameters/AgreementId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AgreementUpdate"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgreementUpdateReference"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "429":
          $ref: "#/components/responses/RateLimitError"
        "500":
          $ref: "#/components/responses/ServerError"
        "503":
          $ref: "#/components/responses/UnavailableError"
        "504":
          $ref: "#/components/responses/TimeoutError"

  "/recurring/v2/agreements/{agreementId}/charges":
    get:
      tags:
        - Charge Endpoints
      summary: List Charges
      operationId: listCharges
      description: >-
        Fetches all charges for a single agreement.
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/Ocp-Apim-Subscription-Key"
        - $ref: "#/components/parameters/Merchant-Serial-Number"
        - $ref: "#/components/parameters/Vipps-System-Name"
        - $ref: "#/components/parameters/Vipps-System-Version"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Name"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Version"
        - $ref: "#/components/parameters/AgreementId"
        - name: chargeStatus
          in: query
          required: false
          description: Filter by status of the charge.
          schema:
            $ref: "#/components/schemas/ChargeStatus"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Charge"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "429":
          $ref: "#/components/responses/RateLimitError"
        "500":
          $ref: "#/components/responses/ServerError"
        "503":
          $ref: "#/components/responses/UnavailableError"
        "504":
          $ref: "#/components/responses/TimeoutError"
    post:
      tags:
        - Charge Endpoints
      summary: Create a new charge
      operationId: createCharge
      description: >-
        Creates a new recurring charge *(payment)* that will charge the user on the date specified. If the payment fails, the charge will be retried based on `retryDays`.
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/Ocp-Apim-Subscription-Key"
        - name: Idempotency-Key
          in: header
          required: true
          description: Idempotency-Key
          example: aGFoYWhhaGFoYWhhaGFoYWhoYWhhYWhhaGEK
          schema:
            $ref: "#/components/schemas/IdempotencyKeyFormat"
        - $ref: "#/components/parameters/Merchant-Serial-Number"
        - $ref: "#/components/parameters/Vipps-System-Name"
        - $ref: "#/components/parameters/Vipps-System-Version"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Name"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Version"
        - $ref: "#/components/parameters/AgreementId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChargeRequest"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChargeReference"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "429":
          $ref: "#/components/responses/RateLimitError"
        "500":
          $ref: "#/components/responses/ServerError"
        "503":
          $ref: "#/components/responses/UnavailableError"
        "504":
          $ref: "#/components/responses/TimeoutError"
  "/recurring/v2/agreements/{agreementId}/accept":
    patch:
      tags:
        - Agreement Endpoints
      summary: Force accept an agreement (Only available in test environment)
      operationId: forceAcceptAgreement
      description: >-
        Forces an agreement to be accepted by the given customer phone number. This endpoint
        can only be used in the test environment.
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/Ocp-Apim-Subscription-Key"
        - $ref: "#/components/parameters/Content-Type"
        - $ref: "#/components/parameters/Merchant-Serial-Number"
        - $ref: "#/components/parameters/Vipps-System-Name"
        - $ref: "#/components/parameters/Vipps-System-Version"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Name"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Version"
        - $ref: "#/components/parameters/AgreementId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AgreementForceAccept"
        required: true
      responses:
        "200":
          description: OK
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "409":
          $ref: "#/components/responses/ServerError"
        "500":
          $ref: "#/components/responses/ServerError"
        "503":
          $ref: "#/components/responses/UnavailableError"
        "504":
          $ref: "#/components/responses/TimeoutError"

  "/recurring/v2/agreements/{agreementId}/charges/{chargeId}":
    get:
      tags:
        - Charge Endpoints
      summary: Fetch a Charge
      operationId: getCharge
      description: >-
        Fetch a single charge for a user. If the payment has failed you can view the failure reason here.
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/Ocp-Apim-Subscription-Key"
        - $ref: "#/components/parameters/Content-Type"
        - $ref: "#/components/parameters/Merchant-Serial-Number"
        - $ref: "#/components/parameters/Vipps-System-Name"
        - $ref: "#/components/parameters/Vipps-System-Version"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Name"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Version"
        - $ref: "#/components/parameters/AgreementId"
        - $ref: "#/components/parameters/ChargeId"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Charge"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "409":
          $ref: "#/components/responses/RateLimitError"
        "500":
          $ref: "#/components/responses/ServerError"
        "503":
          $ref: "#/components/responses/UnavailableError"
        "504":
          $ref: "#/components/responses/TimeoutError"
    delete:
      tags:
        - Charge Endpoints
      summary: Cancel a Charge
      operationId: cancelCharge
      description: >-
        Cancels a due or reserved charge. Note if you cancels an agreement, there is no need to cancel the charges that belongs to the agreement. This will be done automatically by Vipps.
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/Ocp-Apim-Subscription-Key"
        - $ref: "#/components/parameters/Content-Type"
        - name: Idempotency-Key
          in: header
          required: false
          description: Idempotency key
          example: aGFoYWhhaGFoYWhhaGFoYWhoYWhhYWhhaGEK
          schema:
            $ref: "#/components/schemas/IdempotencyKeyFormat"
        - $ref: "#/components/parameters/Merchant-Serial-Number"
        - $ref: "#/components/parameters/Vipps-System-Name"
        - $ref: "#/components/parameters/Vipps-System-Version"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Name"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Version"
        - $ref: "#/components/parameters/AgreementId"
        - $ref: "#/components/parameters/ChargeId"
      responses:
        "200":
          description: Success
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "409":
          description: This charge is not in a deletable state, it may have already been
            charged to the user.
        "429":
          $ref: "#/components/responses/RateLimitError"
        "500":
          $ref: "#/components/responses/ServerError"
        "503":
          $ref: "#/components/responses/UnavailableError"
        "504":
          $ref: "#/components/responses/TimeoutError"
  "/recurring/v2/agreements/{agreementId}/charges/{chargeId}/refund":
    post:
      tags:
        - Charge Endpoints
      summary: Refund a charge
      operationId: refundCharge
      description: >-
        Refunds a charge, can also do a partial refund (refunding a smaller part of the payment).
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/Ocp-Apim-Subscription-Key"
        - $ref: "#/components/parameters/Content-Type"
        - name: Idempotency-Key
          in: header
          required: true
          description: Idempotency key
          example: aGFoYWhhaGFoYWhhaGFoYWhoYWhhYWhhaGEK
          schema:
            $ref: "#/components/schemas/IdempotencyKeyFormat"
        - $ref: "#/components/parameters/Merchant-Serial-Number"
        - $ref: "#/components/parameters/Vipps-System-Name"
        - $ref: "#/components/parameters/Vipps-System-Version"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Name"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Version"
        - $ref: "#/components/parameters/AgreementId"
        - $ref: "#/components/parameters/ChargeId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefundRequest"
        required: true
      responses:
        "200":
          description: Success
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "429":
          $ref: "#/components/responses/RateLimitError"
        "500":
          $ref: "#/components/responses/ServerError"
        "503":
          $ref: "#/components/responses/UnavailableError"
        "504":
          $ref: "#/components/responses/TimeoutError"
  "/recurring/v2/agreements/{agreementId}/charges/{chargeId}/capture":
    post:
      tags:
        - Charge Endpoints
      summary: Capture a reserved charge
      operationId: captureCharge
      description: >-
        Captures an `initialCharge` with type `RESERVE_CAPTURE`.
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/Ocp-Apim-Subscription-Key"
        - $ref: "#/components/parameters/Content-Type"
        - name: Idempotency-Key
          in: header
          required: true
          description: Idempotency key
          example: aGFoYWhhaGFoYWhhaGFoYWhoYWhhYWhhaGEK
          schema:
            $ref: "#/components/schemas/IdempotencyKeyFormat"
        - $ref: "#/components/parameters/Merchant-Serial-Number"
        - $ref: "#/components/parameters/Vipps-System-Name"
        - $ref: "#/components/parameters/Vipps-System-Version"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Name"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Version"
        - $ref: "#/components/parameters/AgreementId"
        - $ref: "#/components/parameters/ChargeId"
      responses:
        "200":
          description: Success
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  "/vipps-userinfo-api/userinfo/{sub}":
    get:
      tags:
        - Userinfo Endpoint
      summary: Get Userinfo
      description: >-
        This endpoint returns the payload with the information that the user has consented to share. Find more info on the `/userinfo` endpoint at the OIDC Standard https://openid.net/specs/openid-connect-core-1_0.html#UserInfo
      operationId: getUserinfo
      parameters:
        - name: sub
          in: path
          description: The `sub` is specified when fetching the agreement
          required: true
          schema:
            type: string
        - in: header
          name: Authorization
          description: >-
            The access token is a base64-encoded string that is required for all API calls.
            It is a JWT (JSON Web Token).
            The access token is fetched from the `POST:/accesstoken/get` endpoint.
            It is valid for 1 hour in the test environment and 24 hours in the production environment.
          required: true
          schema:
            type: string
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1Ni..."
      responses:
        "200":
          description: Get Userinfo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Userinfo"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserinfoError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserinfoError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserinfoError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserinfoError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserinfoError"

servers:
  - url: https://api.vipps.no
    description: Production environment
  - url: https://apitest.vipps.no
    description: Merchant Test environment
components:
  parameters:
    AgreementId:
      name: agreementId
      in: path
      required: true
      description: The agreement identifier (id)
      schema:
        type: string
      example: agr_5kSeqzFAMkfBbc
    ChargeId:
      name: chargeId
      in: path
      required: true
      description: The charge identifier (id)
      schema:
        type: string
      example: chr-123abc456
    Ocp-Apim-Subscription-Key:
      in: header
      name: Ocp-Apim-Subscription-Key
      description: >-
        The subscription key for your API product is available on portal.vipps.no, under the 'Utvikler' tab.
        Keep it secret.
      required: true
      schema:
        type: string
      example: 0f14ebcab0ec4b29ae0cb90d91b4a84a
    Authorization:
      in: header
      name: Authorization
      description: >-
        The access token is a base64-encoded string that is required for all API calls.
        It is a JWT (JSON Web Token).
        The access token is fetched from the `POST:/accesstoken/get` endpoint.
        It is valid for 1 hour in the test environment and 24 hours in the production environment.
      required: true
      schema:
        type: string
    Merchant-Serial-Number:
      name: Merchant-Serial-Number
      in: header
      description: >-
        The Merchant Serial Number (MSN) is a unique id for the sale unit
        that this payment is made for.
        This is a required parameter if you are a Vipps Recurring partner
        making payments on behalf of a merchant.
        The partner must use the merchant's MSN (not the partner's MSN).
        This parameter is optional, and recommended, for regular Vipps
        merchants making payments for themselves.
      schema:
        type: string
      example: 123456
    Vipps-System-Name:
      name: Vipps-System-Name
      in: header
      description: The name of the ecommerce solution. One word in lowercase letters is good.
      schema:
        type: string
      example: woocommerce
    Vipps-System-Version:
      name: Vipps-System-Version
      in: header
      description: The version number of the ecommerce solution.
      schema:
        type: string
      example: "5.4"
    Vipps-System-Plugin-Name:
      name: Vipps-System-Plugin-Name
      in: header
      description: The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
      schema:
        type: string
      example: "vipps-woocommerce"
    Vipps-System-Plugin-Version:
      name: Vipps-System-Plugin-Version
      in: header
      description: The version number of the ecommerce plugin (if applicable).
      schema:
        type: string
      example: "1.2.1"
    Content-Type:
      in: header
      name: Content-Type
      description: "The content type must be `application/json`"
      schema:
        type: string
      example: application/json
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: Bearer 'auth token', from /accesstoken/get
      bearerFormat: JWT
  responses:
    BadRequestError: #400
      description: Invalid request, check your parameters
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/VippsApiError"
    UnauthorizedError: #401
      description: Access token is missing or invalid
    NotFoundError: #404
      description: Item does not exist (and never has)
    ServerError: #500
      description: Internal server error
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/VippsApiError"
    UnavailableError: #503
      description: Service unavailable
    TimeoutError: #504
      description: Timeout
    RateLimitError: #429
      description: Too Many Requests

  schemas:
    AgreementRequest:
      type: object
      required:
        - currency
        - interval
        - intervalCount
        - isApp
        - merchantAgreementUrl
        - merchantRedirectUrl
        - price
        - productDescription
        - productName
      properties:
        variableAmount:
          $ref: "#/components/schemas/VariableAmountRequest"
        campaign:
          $ref: "#/components/schemas/CampaignRequest"
        currency:
          $ref: "#/components/schemas/Currency"
        customerPhoneNumber:
          type: string
          description: "Customers phone number (if available). Used to simplify the
            following Vipps interaction. MSISDN: https://www.msisdn.org"
          maxLength: 15
          example: "4791234567"
        initialCharge:
          $ref: "#/components/schemas/InitialCharge"
        interval:
          $ref: '#/components/schemas/Interval'
        intervalCount:
          type: integer
          format: int32
          description: "Number of intervals between charges. Example: interval=week,
            intervalCount=2 to be able to charge every two weeks. Charges should
            occur at least once a year"
          minimum: 1
          maximum: 31
          example: 2
        isApp:
          type: boolean
          description: If merchant is redirecting user from an app or a mobile device.
          example: true
        merchantAgreementUrl:
          type: string
          description: URL where Vipps can send the customer to view/manage their
            subscription. Typically a "My page" where the user can change, pause, cancel, etc.
            We recommend letting users log in with Vipps, not with username and password.
            We do not have any specific rewuirements for the security of the page.
          example: https://www.example.com/vipps-subscriptions/1234/
        merchantRedirectUrl:
          type: string
          description: URL where customer should be redirected after the agreement has been
            approved/rejected in the Vipps mobile application.
          example: https://api.example.com/vipps-landing
        price:
          type: integer
          format: int32
          description: Treated as a whole sum postfixed with two decimals for cents, eg 234
            = 2.34 NOK
          minimum: 100
          example: 39900
        productName:
          type: string
          description: Product name (short)
          maxLength: 45
          example: Premier League subscription
        productDescription:
          type: string
          description: Product description (longer)
          maxLength: 100
          example: Access to all games of English top football
        scope:
          type: string
          description: Space separated list of the user profile-data scope to require for the agreement.
          example: address name email birthDate phoneNumber
    AgreementUpdate:
      type: object
      properties:
        campaign:
          $ref: "#/components/schemas/Campaign"
        price:
          type: integer
          format: int32
          description: Treated as a whole sum postfixed with two decimals for cents, eg 234
            = 2.34 NOK
          minimum: 0
          example: 39900
        productName:
          type: string
          description: Product name (short)
          maxLength: 45
          example: Premier League subscription
        productDescription:
          type: string
          description: Product description (longer)
          maxLength: 100
          example: Access to all games of English top football
        status:
          $ref: "#/components/schemas/AgreementStatus"
    AgreementForceAccept:
      type: object
      required:
        - customerPhoneNumber
      properties:
        customerPhoneNumber:
          type: string
          description: "Customer's phone number"
          minLength: 8
          maxLength: 16
          example: "91234567"
    Agreement:
      type: object
      required:
          - interval
          - intervalCount
          - price
          - productDescription
          - productName
          - status
      properties:
        variableAmount:
          $ref: "#/components/schemas/VariableAmount"
        campaign:
          $ref: "#/components/schemas/Campaign"
        currency:
          $ref: "#/components/schemas/Currency"
        id:
          type: string
          description: Uniquely identifies this agreement
          maxLength: 36
          example: agr_5kSeqzFAMkfBbc
        interval:
          $ref: "#/components/schemas/Interval"
        intervalCount:
          type: integer
          format: int32
          description: "Number of intervals between charges. Example: interval=week,
            intervalCount=2 to be able to charge every two weeks. Charges should
            occur at least once a year."
          default: 1
          minimum: 1
          maximum: 31
          example: 1
        price:
          type: integer
          format: int32
          description: Treated as a whole sum postfixed with two decimals for cents, eg 234
            = 2.34 NOK
          minimum: 100
          example: 39900
        productName:
          type: string
          description: Product name (short)
          maxLength: 45
          example: Premier League subscription
        productDescription:
          type: string
          description: Product description (longer)
          maxLength: 100
          example: Access to all games of English top football
        start:
          type: string
          format: date-time
          description: Date when agreement was started in ISO 8601 format.
          example: "2019-01-01T00:00:00Z"
        stop:
          type: string
          format: date-time
          description: Date when agreement was stopped in ISO 8601 format.
          example: null
        status:
          $ref: "#/components/schemas/AgreementStatus"
        sub:
          type: string
          format: uuid
          description: User identifier (subject). Will be null if profile data was not requested.
          example: 8d7de74e-0243-11eb-adc1-0242ac120002
        userinfoUrl:
          type: string
          format: uri
          description: The full path of the URL for the userinfo endpoint where the user data can be retrieved. Will be null if profile data was not requested.
          example: https://api.vipps.no/vipps-userinfo-api/userinfo/8d7de74e-0243-11eb-adc1-0242ac120002
        tags:
          type: array
          items:
            type: string
          description: Tags agreement if payments fail in a way that implies that the users payment source needs to be updated.
          example: ["payment-source-issue"]

    AgreementReference:
      type: object
      required:
        - agreementId
        - agreementResource
        - vippsConfirmationUrl
        - chargeId
      properties:
        agreementResource:
          type: string
          description: Reference to Agreement which user may agree to. Initially the
            Agreement is in a pendingUserApproval state, and it enters active
            state once user has approved in the Vipps application.
          example: https://api.vipps.no/v2/agreements/agr_5kSeqzFAMkfBbc
        agreementId:
          type: string
          description: Id of a Agreement which user may agree to. Initially the Agreement
            is in a pendingUserApproval state, and it enters active state once
            user has approved in the Vipps application.
          example: agr_5kSeqzFAMkfBbc
        vippsConfirmationUrl:
          type: string
          description: The `vippsConfirmationUrl` should be used to redirect the
            user to the Vipps landing page in a desktop flow (with `https://`),
            or to the Vipps app in a mobile flow (with `vipps://`), where the
            user can then approve the agreement.
          example: https://api.vipps.no/v2/register/U6JUjQXq8HQmmV
        chargeId:
          type: string
          description: The Id of the initialCharge if given, otherwise `null`.
            If an `orderId` is specified this is used as the `chargeId` otherwise it is auto generated.
          example: chr-123abc456
          pattern: '^[a-zA-Z0-9-]{1,50}$'
    AgreementUpdateReference:
      type: object
      required:
        - agreementId
      properties:
        agreementId:
          type: string
          description: Id of a Agreement which user may agree to. Initially the Agreement
            is in a pendingUserApproval state, and it enters active state once
            user has approved in the Vipps application.
          example: agr_5kSeqzFAMkfBbc
    VariableAmountRequest:
      type: object
      required:
       - suggestedMaxAmount
      description: VariableAmount can not be used togheter with campaign. See the documentation for more information about agreement with variable amount.
      properties:
        suggestedMaxAmount:
          type: integer
          format: int32
          description: The suggested max amount of a charge each interval.
          minimum: 100
          example: 40000
    CampaignRequest:
      type: object
      required:
        - campaignPrice
        - end
      properties:
        campaignPrice:
          type: integer
          format: int32
          description: The price of the agreement in the discount period. The lowering of
            the price will be displayed in-app.
          minimum: 0
          example: 1500
        end:
          type: string
          format: date-time
          description: The date and time the campaign ends in ISO 8601 format. Needs to be UTC
          example: "2019-06-01T00:00:00Z"
    VariableAmount:
      allOf:
        - $ref: "#/components/schemas/VariableAmountRequest"
        - type: object
          required:
          - maxAmount
          properties:
            maxAmount:
              type: integer
              format: int32
              description: The user chosen maximum amount that they allow to be charged each interval.
              example: 40000
    Campaign:
      allOf:
        - $ref: "#/components/schemas/CampaignRequest"
        - type: object
          required:
          - start
          properties:
            start:
              type: string
              format: date-time
              description: The date and time the campaign starts in ISO 8601 format. Needs to be UTC.
              example: "2019-06-01T00:00:00Z"
    InitialCharge:
      type: object
      required:
        - amount
        - currency
        - description
        - transactionType
      properties:
        amount:
          type: integer
          format: int32
          description: Treated as a whole sum postfixed with two decimals for cents, eg 234
            = 2.34 NOK
          example: 49900
          minimum: 100
        currency:
          $ref: "#/components/schemas/Currency"
        description:
          type: string
          description: This field is visible to the end user in-app
          example: Premier League subscription
          maxLength: 45
        transactionType:
          $ref: "#/components/schemas/TransactionType"
        orderId:
          type: string
          description: Optional orderId, will be auto generated if not provided
          example: acmeshop123order123abc
          maxLength: 50
          pattern: '^[a-zA-Z0-9-]{1,50}$'
      description: An initial charge for a new agreement. The charge will be executed
        immediately when the user approves the agreement.
    ChargeRequest:
      type: object
      required:
        - amount
        - description
        - due
      properties:
        amount:
          type: integer
          format: int32
          description: Treated as a whole sum postfixed with two decimals for cents, eg 234
            = 2.34 NOK
          example: 49900
          minimum: 100
        currency:
          $ref: "#/components/schemas/Currency"
        description:
          type: string
          description: This field is visible to the end user in-app
          example: Premier League subscription
          maxLength: 45
        due:
          type: string
          format: date
          description: YYYY-MM-DD. Each specific charge on an agreement must
            be scheduled by the merchant, a minimum of two days before the
            payment will occur (it is minimum one day in the test environment).
          example: "2030-12-31"
        retryDays:
          type: integer
          format: int32
          description: The service will attempt to charge the customer for N days [non
            inclusive], must be null or contain a value >= 0. If zero, no
            retries will be performed
          default: 0
          minimum: 0
          maximum: 14
          example: 5
        orderId:
          type: string
          description: Optional orderId, will be auto generated if not provided
          example: acmeshop123order123abc
          maxLength: 50
          pattern: '^[a-zA-Z0-9-]{1,50}$'
    ChargeReference:
      type: object
      required:
        - chargeId
      properties:
        chargeId:
          type: string
          description: ID of the created charge
          example: chr-123abc456
    Charge:
      type: object
      required:
        - transactionId
        - description
        - type
        - amount
        - amountRefunded
        - due
        - id
        - status
      properties:
        amount:
          type: integer
          format: int32
          description: Treated as a whole sum postfixed with two decimals for cents, eg 234
            = 2.34 NOK
          example: 39900
        amountRefunded:
          type: integer
          format: int32
          description: >-
            The total amount which has been refunded, in case of status
            refund/partial refund.

            Treated as a whole sum postfixed with two decimals for cents, eg 234 = 2.34 NOK
          example: 39900
        description:
          type: string
          description: Description of the charge
          example: "Premier League subscription: September"
        due:
          type: string
          format: date-time
          description: The due date for this charge
          example: "2019-06-01T00:00:00Z"
        id:
          type: string
          description: Identifier for this charge (for this customer's subscription).
          default: NOT_SET
          maxLength: 15
          example: chg_WCVbcAbRCmu2zk
        status:
          $ref: "#/components/schemas/ChargeStatus"
        transactionId:
          type: string
          description: Contains null until the status has reached CHARGED
          maxLength: 36
          example: "5001419121"
        type:
          $ref: "#/components/schemas/ChargeType"
        failureReason:
          type: string
          enum:
            - internal_error
            - insufficient_funds
            - invalid_card
            - verification_required
            - invalid_payment_source
          example: "insufficient_funds"
          description: >
            Identifies the reason why the charged has been marked as `FAILED`:
              * `internal_error` - Something went wrong and the error couldn't be categorized.
              * `insufficient_funds` - Payment was declined by the payer bank due to lack of funds.
              * `invalid_card` - The user tried to pay using a card that has either expired or is disabled by the issuer.
              * `verification_required` - Payment declined because the issuing bank requires verification, e.g. BankID/3DS.
              * `invalid_payment_source` - The provided payment source is disabled or does not exist.
        failureDescription:
          type: string
          description: Description for the failure reason
          example: "Payment was declined by the payer bank due to lack of funds"
    VippsApiError:
      type: object
      required:
        - contextId
        - message
      properties:
        code:
          type: string
        field:
          type: string
        message:
          type: string
          example: Description of the error
        contextId:
          type: string
          example: 0b7a2d85-8233-4a0f-867b-fa77a8cdf8de
    RefundRequest:
      type: object
      required:
        - amount
        - description
      properties:
        amount:
          type: integer
          format: int32
          description: >-
            The total amount which has been refunded, in case of status
            refund/partial refund.
            Treated as a whole sum postfixed with two decimals for cents, eg 234 = 2.34 NOK
          minimum: 100
          example: 49900
        description:
          type: string
          description: A textual description of the operation, which will be displayed in
            the users app.
          maxLength: 45
          example: Forgot to apply discount, refunding 50%
    AgreementStatus:
      type: string
      description: Status of the agreement.
      default: ACTIVE
      example: ACTIVE
      enum:
        - PENDING
        - ACTIVE
        - STOPPED
        - EXPIRED
    ChargeStatus:
      type: string
      example: PENDING
      enum:
        - PENDING
        - DUE
        - RESERVED
        - CHARGED
        - FAILED
        - CANCELLED
        - PARTIALLY_REFUNDED
        - REFUNDED
        - PROCESSING
    Currency:
      type: string
      description: "ISO-4217: https://www.iso.org/iso-4217-currency-codes.html"
      default: NOK
      enum:
        - NOK
      minLength: 3
      maxLength: 3
      pattern: ^[A-Z]{3}$
      example: NOK
    TransactionType:
      type: string
      description: Type of transaction, either direct capture or reserve capture
      enum:
        - DIRECT_CAPTURE
        - RESERVE_CAPTURE
      example: DIRECT_CAPTURE
    ChargeType:
      type: string
      default: RECURRING
      enum:
        - INITIAL
        - RECURRING
      example: RECURRING
    Interval:
      type: string
      description: Interval for subscription
      default: MONTH
      pattern: ^(MONTH|WEEK|DAY)$
      enum:
        - MONTH
        - WEEK
        - DAY
      example: MONTH
    IdempotencyKeyFormat:
      type: string
      maxLength: 40
      pattern: ^[a-zA-Z0-9]*$
      example: kRk3uEeiogxLu1yGSZRlNgsIv3TuNS
    AccessTokenResponse:
      type: object
      properties:
        token_type:
          type: string
          example: Bearer
        expires_in:
          type: string
          example: "3600"
        ext_expires_in:
          type: string
          example: "3600"
        expires_on:
          type: string
          example: "1569831424"
        not_before:
          type: string
          example: "1569827524"
        resource:
          type: string
          example: 00000003-0000-0000-d000-000000000000
        access_token:
          type: string
          example: "aGFoYWhhaGFoYWhhaGFoYWhoYWhhYWhhaGEK..."
    Userinfo:
      type: object
      properties:
        accounts:
          description: 'Contains an array with the end user''s accounts registered in the Vipps app'
          type: array
          items:
            $ref: '#/components/schemas/UserinfoAccountInfo'
        address:
          description: 'Contains the end user''s preferred addresses.'
          items:
            $ref: '#/components/schemas/UserinfoAddress'
        other_addresses:
          description: 'Contains an array with the end user''s none default addresses, if any. This list can contain an address with the address_type home, work, and/or other, if the user has registered them in the Vipps app'
          type: array
          items:
            $ref: '#/components/schemas/Address'
        birthdate:
          description: 'End-User''s birthday formatted as YYYY-MM-DD'
          type: string
          example: '1985-12-31'
        email:
          description: 'End user''s email address.'
          example: 'user@example.com'
          type: string
        email_verified:
          description: 'Boolean value if the End user''s email address is verified.'
          example: true
          type: boolean
        family_name:
          description: 'Surname(s) or last name(s) of the end user.'
          example: 'Garborg'
          type: string
        given_name:
          description: 'Given name(s) or first name(s) of the end user. Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters.'
          example: 'Rune'
          type: string
        name:
          description: 'End user''s full name in displayable form including all name parts, possibly including titles and suffixes, ordered according to the End-User''s locale and preferences.'
          example: 'Rune Garborg'
          type: string
        nin:
          description: 'National identity number'
          type: string
          example: '09057517287'
          pattern: '^\d{11}$'
        phone_number:
          description: 'End-User''s telephone number on MSISDN format, up to 15 digits.'
          type: string
          example: '47912345678'
          pattern: '^\d{15}$'
        sid:
          description: 'Session identifier - This represents a Session of a User Agent or device. Currently not in use'
          type: string
          example: '7d78a726-af92-499e-b857-de263ef9a969'
        sub:
          description: 'Subject - Identifier for the end user'
          type: string
          example: 'c06c4afe-d9e1-4c5d-939a-177d752a0944'
    UserinfoAccountInfo:
      type: object
      properties:
        account_name:
          description: "User''s defined name for account"
          type: string
        account_number:
          description: "User''s account number"
          type: string
        bank_name:
          description: "Bank connected to the account number"
          type: string
    UserinfoAddress:
      type: object
      properties:
        address_type:
          description: 'Address type is either home, work or other'
          type: string
        country:
          description: 'Two letter country code'
          type: string
        default:
          description: 'If this is default address'
          type: boolean
        formatted:
          description: 'End user address as a formatted string'
          type: string
        postal_code:
          description: 'Postal code'
          type: string
        region:
          description: 'End user region'
          type: string
        street_address:
          description: 'End user street address'
          type: string
    Address:
      type: object
      required:
        - addressLine1
        - city
        - country
        - postCode
      properties:
        addressLine1:
          type: string
          description: Address Line 1
          example: Robert Levins gate 5
        addressLine2:
          type: string
          description: Address Line 2
          example: 'Att: Rune Garborg'
        city:
          type: string
          description: City
          example: Oslo
        country:
          type: string
          description: 'Country'
          example: 'Norway'
          enum:
            - Norway
        postCode:
          type: string
          description: Post Code
          example: '0154'
    UserinfoError:
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        status:
          type: string
        detail:
          type: string
        instance:
          type: string
        extraInfo:
          type: object
          additionalProperties:
            type: object
